# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import server_pb2 as server__pb2


class ServerStub(object):
    """Server queries
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetServerList = channel.unary_unary(
                '/pubsub.Server/GetServerList',
                request_serializer=server__pb2.Empty.SerializeToString,
                response_deserializer=server__pb2.ServerList.FromString,
                )
        self.JoinServer = channel.unary_unary(
                '/pubsub.Server/JoinServer',
                request_serializer=server__pb2.ClientDetails.SerializeToString,
                response_deserializer=server__pb2.StatusOfClientRequest.FromString,
                )
        self.LeaveServer = channel.unary_unary(
                '/pubsub.Server/LeaveServer',
                request_serializer=server__pb2.ClientDetails.SerializeToString,
                response_deserializer=server__pb2.StatusOfClientRequest.FromString,
                )
        self.GetArticles = channel.unary_unary(
                '/pubsub.Server/GetArticles',
                request_serializer=server__pb2.RequestMessage.SerializeToString,
                response_deserializer=server__pb2.ArticleList.FromString,
                )
        self.PublishArticle = channel.unary_unary(
                '/pubsub.Server/PublishArticle',
                request_serializer=server__pb2.Article.SerializeToString,
                response_deserializer=server__pb2.StatusOfClientRequest.FromString,
                )


class ServerServicer(object):
    """Server queries
    """

    def GetServerList(self, request, context):
        """Returns List of servers and their addresses
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def JoinServer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def LeaveServer(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetArticles(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def PublishArticle(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetServerList': grpc.unary_unary_rpc_method_handler(
                    servicer.GetServerList,
                    request_deserializer=server__pb2.Empty.FromString,
                    response_serializer=server__pb2.ServerList.SerializeToString,
            ),
            'JoinServer': grpc.unary_unary_rpc_method_handler(
                    servicer.JoinServer,
                    request_deserializer=server__pb2.ClientDetails.FromString,
                    response_serializer=server__pb2.StatusOfClientRequest.SerializeToString,
            ),
            'LeaveServer': grpc.unary_unary_rpc_method_handler(
                    servicer.LeaveServer,
                    request_deserializer=server__pb2.ClientDetails.FromString,
                    response_serializer=server__pb2.StatusOfClientRequest.SerializeToString,
            ),
            'GetArticles': grpc.unary_unary_rpc_method_handler(
                    servicer.GetArticles,
                    request_deserializer=server__pb2.RequestMessage.FromString,
                    response_serializer=server__pb2.ArticleList.SerializeToString,
            ),
            'PublishArticle': grpc.unary_unary_rpc_method_handler(
                    servicer.PublishArticle,
                    request_deserializer=server__pb2.Article.FromString,
                    response_serializer=server__pb2.StatusOfClientRequest.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pubsub.Server', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Server(object):
    """Server queries
    """

    @staticmethod
    def GetServerList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pubsub.Server/GetServerList',
            server__pb2.Empty.SerializeToString,
            server__pb2.ServerList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def JoinServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pubsub.Server/JoinServer',
            server__pb2.ClientDetails.SerializeToString,
            server__pb2.StatusOfClientRequest.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def LeaveServer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pubsub.Server/LeaveServer',
            server__pb2.ClientDetails.SerializeToString,
            server__pb2.StatusOfClientRequest.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetArticles(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pubsub.Server/GetArticles',
            server__pb2.RequestMessage.SerializeToString,
            server__pb2.ArticleList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def PublishArticle(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pubsub.Server/PublishArticle',
            server__pb2.Article.SerializeToString,
            server__pb2.StatusOfClientRequest.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
