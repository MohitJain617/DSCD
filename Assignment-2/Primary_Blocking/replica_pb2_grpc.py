# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import replica_pb2 as replica__pb2


class ReplicaStub(object):
    """Server queries
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UpdateReplicaList = channel.unary_unary(
                '/backupr.Replica/UpdateReplicaList',
                request_serializer=replica__pb2.ReplicaDetails.SerializeToString,
                response_deserializer=replica__pb2.RequestStatus.FromString,
                )
        self.WriteRequest = channel.unary_unary(
                '/backupr.Replica/WriteRequest',
                request_serializer=replica__pb2.WriteDetails.SerializeToString,
                response_deserializer=replica__pb2.WriteResponse.FromString,
                )
        self.ReadRequest = channel.unary_unary(
                '/backupr.Replica/ReadRequest',
                request_serializer=replica__pb2.ReadDetails.SerializeToString,
                response_deserializer=replica__pb2.ReadResponse.FromString,
                )
        self.DeleteRequest = channel.unary_unary(
                '/backupr.Replica/DeleteRequest',
                request_serializer=replica__pb2.DeleteDetails.SerializeToString,
                response_deserializer=replica__pb2.DeleteResponse.FromString,
                )


class ReplicaServicer(object):
    """Server queries
    """

    def UpdateReplicaList(self, request, context):
        """Registry server will call this RPC for the primary replica
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def WriteRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ReadRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def DeleteRequest(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ReplicaServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'UpdateReplicaList': grpc.unary_unary_rpc_method_handler(
                    servicer.UpdateReplicaList,
                    request_deserializer=replica__pb2.ReplicaDetails.FromString,
                    response_serializer=replica__pb2.RequestStatus.SerializeToString,
            ),
            'WriteRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.WriteRequest,
                    request_deserializer=replica__pb2.WriteDetails.FromString,
                    response_serializer=replica__pb2.WriteResponse.SerializeToString,
            ),
            'ReadRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.ReadRequest,
                    request_deserializer=replica__pb2.ReadDetails.FromString,
                    response_serializer=replica__pb2.ReadResponse.SerializeToString,
            ),
            'DeleteRequest': grpc.unary_unary_rpc_method_handler(
                    servicer.DeleteRequest,
                    request_deserializer=replica__pb2.DeleteDetails.FromString,
                    response_serializer=replica__pb2.DeleteResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'backupr.Replica', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class Replica(object):
    """Server queries
    """

    @staticmethod
    def UpdateReplicaList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/backupr.Replica/UpdateReplicaList',
            replica__pb2.ReplicaDetails.SerializeToString,
            replica__pb2.RequestStatus.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def WriteRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/backupr.Replica/WriteRequest',
            replica__pb2.WriteDetails.SerializeToString,
            replica__pb2.WriteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ReadRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/backupr.Replica/ReadRequest',
            replica__pb2.ReadDetails.SerializeToString,
            replica__pb2.ReadResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def DeleteRequest(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/backupr.Replica/DeleteRequest',
            replica__pb2.DeleteDetails.SerializeToString,
            replica__pb2.DeleteResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
