# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import registryserver_pb2 as registryserver__pb2


class RegistryServerStub(object):
    """Registry server messages
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Register = channel.unary_unary(
                '/pubsub.RegistryServer/Register',
                request_serializer=registryserver__pb2.ServerDetails.SerializeToString,
                response_deserializer=registryserver__pb2.StatusOfRegistry.FromString,
                )
        self.GetServerList = channel.unary_unary(
                '/pubsub.RegistryServer/GetServerList',
                request_serializer=registryserver__pb2.ClientDetails.SerializeToString,
                response_deserializer=registryserver__pb2.ServerList.FromString,
                )


class RegistryServerServicer(object):
    """Registry server messages
    """

    def Register(self, request, context):
        """Registers a server and sends the status
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetServerList(self, request, context):
        """Returns List of servers and their addresses
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_RegistryServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Register': grpc.unary_unary_rpc_method_handler(
                    servicer.Register,
                    request_deserializer=registryserver__pb2.ServerDetails.FromString,
                    response_serializer=registryserver__pb2.StatusOfRegistry.SerializeToString,
            ),
            'GetServerList': grpc.unary_unary_rpc_method_handler(
                    servicer.GetServerList,
                    request_deserializer=registryserver__pb2.ClientDetails.FromString,
                    response_serializer=registryserver__pb2.ServerList.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'pubsub.RegistryServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class RegistryServer(object):
    """Registry server messages
    """

    @staticmethod
    def Register(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pubsub.RegistryServer/Register',
            registryserver__pb2.ServerDetails.SerializeToString,
            registryserver__pb2.StatusOfRegistry.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetServerList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/pubsub.RegistryServer/GetServerList',
            registryserver__pb2.ClientDetails.SerializeToString,
            registryserver__pb2.ServerList.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
